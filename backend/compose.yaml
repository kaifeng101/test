services:
  employee:
    build:
      context: ./employee
    networks:
      - kong-net
    expose:
      - 8080
  
  attendance:
    build:
      context: ./attendance
    networks:
      - kong-net
    expose:
      - 8080

  wfhrequests:
    build:
      context: ./wfhRequests
    networks:
      - kong-net
    expose:
      - 8080
  
  scheduler:
    build:
      context: ./scheduler
    networks:
      - kong-net
    expose:
      - 8080


  leaves:
    build:
      context: ./leaves
    networks:
      - kong-net
    expose:
      - 8080

  kong:
    image: kong:3.6.1
    depends_on:
      kong-migration:
        condition: service_completed_successfully
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-db
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kongpass
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_ADMIN_GUI_LISTEN: "0.0.0.0:8002"
      KONG_ADMIN_GUI_URL: http://localhost:8002
    ports:
      - 8000:8000
      - 8443:8443
      - 8001:8001
      - 8444:8444
      - 8002:8002
      - 8445:8445
      - 8003:8003
      - 8004:8004
    networks:
      - kong-net
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 3
  kong-migration:
    image: kong:3.6.1
    command: kong migrations bootstrap && kong migrations up && kong migrations finish
    restart: on-failure
    networks:
      - kong-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-db
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kongpass
    depends_on:
      - kong-db
  kong-db:
    image: postgres:16
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kongpass
    ports:
      - "5432:5432"
    networks:
      - kong-net
    volumes:
      - kong-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 5s
      retries: 5

  deck:
    image: kong/deck:v1.36.1
    environment:
      KONG_ADDR: http://kong:8001
    networks:
      - kong-net
    volumes:
      - ./config/kong/kong.yaml:/deck/kong.yaml
      - ./config/kong/deck-sync.sh:/deck/deck-sync.sh
    depends_on:
      kong:
        condition: service_healthy
    entrypoint: ["/deck/deck-sync.sh"]

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"  # For RabbitMQ management UI
    volumes:
      - ./config/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./config/rabbitmq/defs.json:/etc/rabbitmq/defs.json
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - kong-net

  celery-worker:
    build: ./scheduler
    command: celery -A tasks worker --loglevel=info --pool=solo
    networks:
      - kong-net
    expose:
      - 8080
    depends_on:
      rabbitmq:
        condition: service_healthy

  flower:
    image: mher/flower
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
      - FLOWER_UNAUTHENTICATED_API=true
    ports:
      - "5555:5555"
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - kong-net
      
networks:
  kong-net:

volumes:
  kong-db:
  rabbitmq-data:
